require 'rails_helper'

# matchers docs https://relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
#rspec was generated by adding the gem 'rspec-rails' and the following command: rails g rspec:install
#this was generated with: rails g rspec:model JobPost

#to run all rspec tests run: rspec
#to run it with full details: rspec -fd

#Below is a a variable created to get a string of at least 100 characters
# RANDOM_100_CHARS = "hello world hello world hello world hello world hello world hello world hello world hello hello worl hello world hello world"

RSpec.describe JobPost, type: :model do
  # pending "add some examples to (or delete) #{__FILE__}"
  #above is just a boilerplate example

  describe "validates" do
    #the keyword "describe" describes the context within which the test willl happen
    #The `describe` is used to group related tests together. 
    #i.e. we are describing the context of testing validations
    #then we are describing the context of tests for "title", "description", etc.
    # It's primarily an organizational tool.
    # All of the grouped tests should be written within the block of the method
    describe "title" do
      # `it` is another RSpec keyword which is used to define an "Example"(test case)
      # The string argument often uses the word `should`
      # and it meant to describe what specific behaviour should happen inside this block
      it "requires a title to be present" do
        #GIVEN
        # job_post = JobPost.new
        job_post = FactoryBot.build(:job_post, title: nil)

        #WHEN
        job_post.valid?

        #THEN
        #The following will pass the test if the errors.messages hash has a key named :title
        #This occurs when "title" validation fails
        expect(job_post.errors.messages).to(have_key(:title))
        #expect is passed a value we're asserting that we can chain with .to()
        #.to() accepts an assertion/expectation clause
      end

      it "requires a unique title" do
        #GIVEN
        # persisted_job_post = JobPost.create(
        #   title: "Full Stack Developer",
        #   description: RANDOM_100_CHARS,
        #   min_salary: 35_000,
        #   location: "Vancouver"
        # )
        persisted_job_post = FactoryBot.create(:job_post)

        # job_post = JobPost.new(
        #   title: persisted_job_post.title,
        #   description: RANDOM_100_CHARS,
        #   min_salary: 35_000,
        #   location: "Vancouver"
        # )
        job_post = FactoryBot.build(:job_post, title: persisted_job_post.title)

        #WHEN
        job_post.valid?

        #THEN
        expect(job_post.errors.messages).to(have_key(:title))
      end
    end

    describe "description" do
      it "requires a description to be present" do
        #GIVEN
        # job_post = JobPost.new
        job_post = FactoryBot.build(:job_post, description: nil)


        #WHEN
        job_post.valid?

        #THEN
        expect(job_post.errors.messages).to(have_key(:description))
      end

      it "requires a description to be at least 100 character" do
        #GIVEN
        # job_post = JobPost.new(title: "This is a unique title", description: "This descrition is less that 100 chars")
        job_post = FactoryBot.build(:job_post, description: "I am less than 100 chars")

        #WHEN
          job_post.valid?

        #THEN
        expect(job_post.errors.messages).to(have_key(:description))
      end

    end

    describe "min_salary" do
      it "requires min_salary to be numerical" do
        #GIVEN
        # job_post = JobPost.new(
        #   title: "Full Stack Developer",
        #   description: RANDOM_100_CHARS,
        #   min_salary: "forty thousand",
        #   location: "Vancouver"
        # )
        job_post = FactoryBot.build(:job_post, min_salary: "forty thousand")


        #WHEN
        job_post.valid?

        #THEN
        expect(job_post.errors.messages).to(have_key(:min_salary))
      end

      it "requires min_salary to be at greater than 30_000" do
        #GIVEN
        # job_post = JobPost.new(
        #   title: "Full Stack Developer",
        #   description: RANDOM_100_CHARS,
        #   min_salary: 25_000,
        #   location: "Vancouver"
        # )
        job_post = FactoryBot.build(:job_post, min_salary: 25_000)

        #WHEN
        job_post.valid?

        #THEN
        expect(job_post.errors.messages).to(have_key(:min_salary))
      end

    end

    describe "location" do
      it "requires a location to be present" do
        #GIVEN
        # job_post = JobPost.new
        job_post = FactoryBot.build(:job_post, location: nil)

        #WHEN
        job_post.valid?

        #THEN
        expect(job_post.errors.messages).to(have_key(:location))
      end
    end

  end

end


